package benchmark.fft;

import java.util.*;
import org.civet.Civet;
import org.civet.Civet.Compile;

public class Main {
    
    public Main() {
        super();
    }
    
    @Compile()
    public static void main(String[] argv) {
        int iters;
        if (argv.length != 2) throw new Error("Two integer arguments are needed!");
        try {
            iters = Integer.parseInt(argv[1]);
        } catch (NumberFormatException e) {
            throw new Error("Argument must be an integer!");
        }
        benchmark.fft.Main.JRun$1001(iters);
    }
    
    public static void JKernel(int size, int iters) {
        long RANDOM_SEED = 10101010;
        Random R = new Random(RANDOM_SEED);
        double[] _data = RandomVector(size, R);
        int result = 0;
        Timer tim = new Timer();
        long total_time = 0;
        for (int i = 0; i < 10; i++) {
            System.out.print("[Iteration #" + i + "] ");
            System.out.flush();
            tim.start();
            result = result + performTest(_data, iters, size);
            tim.stop();
            if (i > 4) total_time = total_time + tim.diff();
            tim.report();
        }
        System.out.println("Result: " + result);
        System.out.println("Average time 5 last iterations: " + (total_time / 5));
    }
    
    public static int performTest(double[] _data, int iters, int size) {
        int result = 0;
        for (int i = 0; i < iters; i++) {
            FFT.transform(_data, size);
            for (int j = Civet.CT(0, Civet.IsCT(size)); j < size; j = j + 4) result = result + (int)(_data[j] * 100);
        }
        return result;
    }
    
    public static void TidyUp() {
        System.gc();
    }
    
    public static void JRun(int size, int inters) {
        JKernel(size, inters);
        TidyUp();
    }
    
    public static double[] RandomVector(int N, java.util.Random R) {
        double[] A = new double[N];
        for (int i = 0; i < N; i++) A[i] = R.nextDouble() * 1.0E-6;
        return A;
    }
    
    public static double[] RandomVector$1003(java.util.Random R) {
        double[] A = new double[16];
        {
            int i = 0;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
            i++;
            A[i] = R.nextDouble() * 1.0E-6;
        }
        return A;
    }
    
    public static int performTest$1004(double[] _data, int iters) {
        int result = 0;
        for (int i = 0; i < iters; i++) {
            benchmark.fft.FFT.transform$1005(_data);
            {
                result = result + (int)(_data[0] * 100);
                result = result + (int)(_data[4] * 100);
                result = result + (int)(_data[8] * 100);
                result = result + (int)(_data[12] * 100);
            }
        }
        return result;
    }
    
    public static void JKernel$1002(int iters) {
        long RANDOM_SEED = 10101010;
        Random R = new Random(RANDOM_SEED);
        double[] _data = benchmark.fft.Main.RandomVector$1003(R);
        int result = 0;
        Timer tim = new Timer();
        long total_time = 0;
        for (int i = 0; i < 10; i++) {
            System.out.print("[Iteration #" + i + "] ");
            System.out.flush();
            tim.start();
            result = result + benchmark.fft.Main.performTest$1004(_data, iters);
            tim.stop();
            if (i > 4) total_time = total_time + tim.diff();
            tim.report();
        }
        System.out.println("Result: " + result);
        System.out.println("Average time 5 last iterations: " + (total_time / 5));
    }
    
    public static void JRun$1001(int inters) {
        benchmark.fft.Main.JKernel$1002(inters);
        TidyUp();
    }
}