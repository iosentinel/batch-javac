package benchmark.power;

import org.civet.Civet;

public class Power extends Object {
    int exp;
    Binary op;
    int neutral;
    
    Power(int exp, Binary op, int neutral) {
        super();
        this.exp = exp;
        this.op = op;
        this.neutral = neutral;
    }
    
    int raise(int base) {
        int res = Civet.RT(neutral);
        for (int i = Civet.CT(0, Civet.IsCT(this)); i < exp; i++) {
            res = op.eval(base, res);
        }
        return res;
    }
    
    static int raise$1003(int base) {
        int res = 1;
        {
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
            {
                res = benchmark.power.Mult.eval$1004(base, res);
            }
        }
        return res;
    }
    
    static int raise$1005(int base) {
        int res = 0;
        {
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
            {
                res = benchmark.power.Add.eval$1006(base, res);
            }
        }
        return res;
    }
}
class Binary extends Object {
    
    Binary() {
        super();
    }
    
    int eval(int x, int y) {
        return this.eval(x, y);
    }
}
class Add extends Binary {
    
    Add() {
        super();
    }
    
    int eval(int x, int y) {
        return x + y;
    }
    
    static int eval$1006(int x, int y) {
        return x + y;
    }
}
class Mult extends Binary {
    
    Mult() {
        super();
    }
    
    int eval(int x, int y) {
        return x * y;
    }
    
    static int eval$1004(int x, int y) {
        return x * y;
    }
}