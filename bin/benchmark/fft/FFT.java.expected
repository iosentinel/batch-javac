package benchmark.fft;

import org.civet.Civet;

public class FFT {
    
    public FFT() {
        super();
    }
    
    public static void transform(double[] data, int datasize) {
        transform_internal(data, Civet.CT(-1), datasize);
    }
    
    protected static int log2(int n) {
        int log = 0;
        for (int k = 1; k < n; k = k * 2, log++) ;
        if (n != (1 << log)) throw new Error("FFT: Data length is not a power of 2!: " + n);
        return log;
    }
    
    public static double getPI() {
        return Math.PI;
    }
    
    public static double sin(double a) {
        return Math.sin(a);
    }
    
    protected static void transform_internal(double[] data, int direction, int datasize) {
        int n = datasize / 2;
        if (n == 1) return;
        int logn = log2(n);
        bitreverse(data, datasize);
        for (int bit = Civet.CT(0, Civet.IsCT(n)), dual = Civet.CT(1, Civet.IsCT(n)); bit < logn; bit++, dual = dual * 2) {
            double w_real = Civet.CT(1.0);
            double w_imag = Civet.CT(0.0);
            double theta = Civet.CT(2.0 * direction * getPI() / (2.0 * (double)dual));
            double s = sin(theta);
            double t = sin(theta / 2.0);
            double s2 = 2.0 * t * t;
            for (int b = Civet.CT(0, Civet.IsCT(n)); b < n; b = b + 2 * dual) {
                int i = 2 * b;
                int j = 2 * (b + dual);
                double wd_real = data[j];
                double wd_imag = data[j + 1];
                data[j] = data[i] - wd_real;
                data[j + 1] = data[i + 1] - wd_imag;
                data[i] = data[i] + wd_real;
                data[i + 1] = data[i + 1] + wd_imag;
            }
            for (int a = Civet.CT(1, Civet.IsCT(dual)); a < dual; a++) {
                {
                    double tmp_real = w_real - s * w_imag - s2 * w_real;
                    double tmp_imag = w_imag + s * w_real - s2 * w_imag;
                    w_real = tmp_real;
                    w_imag = tmp_imag;
                }
                for (int b = Civet.CT(0, Civet.IsCT(n)); b < n; b = b + 2 * dual) {
                    int i = 2 * (b + a);
                    int j = 2 * (b + a + dual);
                    double z1_real = data[j];
                    double z1_imag = data[j + 1];
                    double wd_real = w_real * z1_real - w_imag * z1_imag;
                    double wd_imag = w_real * z1_imag + w_imag * z1_real;
                    data[j] = data[i] - wd_real;
                    data[j + 1] = data[i + 1] - wd_imag;
                    data[i] = data[i] + wd_real;
                    data[i + 1] = data[i + 1] + wd_imag;
                }
            }
        }
    }
    
    protected static void bitreverse(double[] data, int datasize) {
        int n = datasize / 2;
        for (int i = Civet.CT(0, Civet.IsCT(n)), j = Civet.CT(0, Civet.IsCT(n)); i < n - 1; i++) {
            int ii = 2 * i;
            int jj = 2 * j;
            int k = n / 2;
            if (i < j) {
                double tmp_real = data[ii];
                double tmp_imag = data[ii + 1];
                data[ii] = data[jj];
                data[ii + 1] = data[jj + 1];
                data[jj] = tmp_real;
                data[jj + 1] = tmp_imag;
            }
            while (k <= j) {
                j = j - k;
                k = k / 2;
            }
            j = j + k;
        }
    }
    
    protected static void bitreverse$1007(double[] data) {
        {
            double tmp_real = data[2];
            double tmp_imag = data[3];
            data[2] = data[8];
            data[3] = data[9];
            data[8] = tmp_real;
            data[9] = tmp_imag;
        }
        {
            double tmp_real = data[6];
            double tmp_imag = data[7];
            data[6] = data[12];
            data[7] = data[13];
            data[12] = tmp_real;
            data[13] = tmp_imag;
        }
    }
    
    protected static void transform_internal$1006(double[] data) {
        benchmark.fft.FFT.bitreverse$1007(data);
        {
            {
                {
                    double wd_real = data[2];
                    double wd_imag = data[3];
                    data[2] = data[0] - wd_real;
                    data[3] = data[1] - wd_imag;
                    data[0] = data[0] + wd_real;
                    data[1] = data[1] + wd_imag;
                }
                {
                    double wd_real = data[6];
                    double wd_imag = data[7];
                    data[6] = data[4] - wd_real;
                    data[7] = data[5] - wd_imag;
                    data[4] = data[4] + wd_real;
                    data[5] = data[5] + wd_imag;
                }
                {
                    double wd_real = data[10];
                    double wd_imag = data[11];
                    data[10] = data[8] - wd_real;
                    data[11] = data[9] - wd_imag;
                    data[8] = data[8] + wd_real;
                    data[9] = data[9] + wd_imag;
                }
                {
                    double wd_real = data[14];
                    double wd_imag = data[15];
                    data[14] = data[12] - wd_real;
                    data[15] = data[13] - wd_imag;
                    data[12] = data[12] + wd_real;
                    data[13] = data[13] + wd_imag;
                }
            }
            {
                {
                    {
                        double wd_real = data[4];
                        double wd_imag = data[5];
                        data[4] = data[0] - wd_real;
                        data[5] = data[1] - wd_imag;
                        data[0] = data[0] + wd_real;
                        data[1] = data[1] + wd_imag;
                    }
                    {
                        double wd_real = data[12];
                        double wd_imag = data[13];
                        data[12] = data[8] - wd_real;
                        data[13] = data[9] - wd_imag;
                        data[8] = data[8] + wd_real;
                        data[9] = data[9] + wd_imag;
                    }
                }
                {
                    {
                        double z1_real = data[6];
                        double z1_imag = data[7];
                        double wd_real = 2.220446049250313E-16 * z1_real - -1.0 * z1_imag;
                        double wd_imag = 2.220446049250313E-16 * z1_imag + -1.0 * z1_real;
                        data[6] = data[2] - wd_real;
                        data[7] = data[3] - wd_imag;
                        data[2] = data[2] + wd_real;
                        data[3] = data[3] + wd_imag;
                    }
                    {
                        double z1_real = data[14];
                        double z1_imag = data[15];
                        double wd_real = 2.220446049250313E-16 * z1_real - -1.0 * z1_imag;
                        double wd_imag = 2.220446049250313E-16 * z1_imag + -1.0 * z1_real;
                        data[14] = data[10] - wd_real;
                        data[15] = data[11] - wd_imag;
                        data[10] = data[10] + wd_real;
                        data[11] = data[11] + wd_imag;
                    }
                }
            }
            {
                {
                    double wd_real = data[8];
                    double wd_imag = data[9];
                    data[8] = data[0] - wd_real;
                    data[9] = data[1] - wd_imag;
                    data[0] = data[0] + wd_real;
                    data[1] = data[1] + wd_imag;
                }
                {
                    {
                        double z1_real = data[10];
                        double z1_imag = data[11];
                        double wd_real = 0.7071067811865475 * z1_real - -0.7071067811865475 * z1_imag;
                        double wd_imag = 0.7071067811865475 * z1_imag + -0.7071067811865475 * z1_real;
                        data[10] = data[2] - wd_real;
                        data[11] = data[3] - wd_imag;
                        data[2] = data[2] + wd_real;
                        data[3] = data[3] + wd_imag;
                    }
                    {
                        double z1_real = data[12];
                        double z1_imag = data[13];
                        double wd_real = 5.551115123125783E-17 * z1_real - -1.0 * z1_imag;
                        double wd_imag = 5.551115123125783E-17 * z1_imag + -1.0 * z1_real;
                        data[12] = data[4] - wd_real;
                        data[13] = data[5] - wd_imag;
                        data[4] = data[4] + wd_real;
                        data[5] = data[5] + wd_imag;
                    }
                    {
                        double z1_real = data[14];
                        double z1_imag = data[15];
                        double wd_real = -0.7071067811865475 * z1_real - -0.7071067811865475 * z1_imag;
                        double wd_imag = -0.7071067811865475 * z1_imag + -0.7071067811865475 * z1_real;
                        data[14] = data[6] - wd_real;
                        data[15] = data[7] - wd_imag;
                        data[6] = data[6] + wd_real;
                        data[7] = data[7] + wd_imag;
                    }
                }
            }
        }
    }
    
    public static void transform$1005(double[] data) {
        benchmark.fft.FFT.transform_internal$1006(data);
    }
}